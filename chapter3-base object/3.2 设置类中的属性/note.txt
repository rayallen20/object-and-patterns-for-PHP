3.2 设置类中的属性
PART1 设置属性
class ShopProduct
{
    public $title = 'default product';
    public $producerMainName = 'main name';
    public $producerFirstName = 'first name';
    public $price = 0;
}

上边这段代码，就是给类ShopProduct设置了4属性，并给每个属性赋了初始值。

PART2 访问属性
$product1 = new ShopProduct();
$product1->title;

PART3 public protected private
因为此处$title被设置为public，所以可以在类的外部通过对象来修改在类中设置的初始值。
$product1 = new ShopProduct();
$product2 = new ShopProduct();
$product1->title = 'My Antonia';
$product2->title = 'Catch 22';

PART4 其它内容
class ShopProduct
{
    public $title = 'default product';
    public $producerMainName = 'main name';
    public $producerFirstName = 'first name';
    public $price = 0;
}

$product1 = new ShopProduct();
$product2 = new ShopProduct();
$product1->title = 'My Antonia';
$product2->title = 'Catch 22';
$product1->aaa = 'b';
echo $product1->aaa;

由上述代码看出，PHP允许在类的外部以对象的形式动态的给对象添加属性，但不建议这么做。
原因:
1.在创建类时，就已经定义好类中有哪些方法和字段了。所以通过new ClassName()创建出的对象，默认都是拥有这些字段和方法的。
但是动态创建的属性或方法则没有这个保证。
2.代码太过松散。如果总是通过对象动态的设置属性或方法，因为不在类体中，所以不易找到。