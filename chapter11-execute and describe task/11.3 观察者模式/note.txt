读后回答下列问题:
Q1 观察者模式为了解决什么问题?
Q2 观察者模式是以什么样的代码组织形式解决的这个问题?

PART1 问题
先来谈一个话题--正交性。正交性是为了实现最大程度的解耦，使得项目中当某一处发生改动后，对其他地方的影响程度降至最小。
但是在现实中，某个组件中，一定包含了对其他组件的调用。当然我们可以使用一些策略来使这个耦合性降低。

例:
现在我们有一个Login类，负责处理用户登录。
其代码见11-3-1.php

当用户登录功能实现后，需求改变了。
新的需求:需要将用户登录的IP地址记录到日志信息当中。于是，我们在handleLogin()方法中需要添加"记录日志"这个功能。
其代码见11-3-2.php

在handleLogin()方法中添加了"记录日志"功能后，需求再次发生改变。
新的需求:当用户登录失败时(无论是用户不存在还是密码错误了)，都要求发送一封邮件到管理员邮箱中。于是，我们需要在handleLogin()
方法中再次添加"登录失败时发送邮件"功能。
其代码见11-3-3.php

随着需求的不断改动，在handleLogin()方法中需要增加(改动)的代码量就越来越大。最终导致的结果是头重脚轻，Login类和系统造成了
严重耦合。这样做的结果就是无法将Login类抽象出来，放到其他的系统中也可以实现登录功能。(除非你剪切掉诸如"记录日志/发送邮件"等功能
的代码，将handleLogin()方法回退到仅有登录功能的状态，不过因此你也成了个"剪切粘贴"的码农，而不是程序员)

但是我希望，随着需求的改动，我还能保持Login类能够抽象出来，能够做到上文中说的"放到其他系统中也可以实现登录功能"。该怎么办呢？
答案:使用"观察者模式"

PART2 实现
定义:观察者模式是把客户元素(观察者)从一个中心类(主体)中分离开来。当主体知道事件发生时，观察者需要被通知到。同时，我们并不希望
将主体和观察者之间的关系硬编码。

个人理解:
1.中心类:即实现功能的类，我认为就是"被观察者类"。
2.不进行硬编码:即不是在主体中将 new 观察者类名()这句话写死。反之亦然，也不是在观察者中，将new 主体类名()写死。

猜测:
1.根据"单一权限"原则，我猜，观察者和主体之间，是多对1的关系。即:观察者A负责观察事件a有没有发生；观察者B负责观察事件B有没有发生...
以此类推。
2.至于如何实现"不进行硬编码"，我猜可能是通过多态，即 new 超类() 这种方式来实现的。(这句话其实很不成立，因为如果超类是个interface或abstract class 则new就不成立了)

实现理论:为了达到"不进行硬编码"的目的，我们要将观察者在主体上进行注册。(个人理解:在主体类中创建观察者类的实例)
其代码见11-3-4.php

对代码11-3-4.php的解释:
首先，"观察者们"可以通过attach()方法，注册到"主体类"中去。也可以通过detach()方法，从"主体类"中解除注册。最后，再通过主体类的notify()方法，
"告知"观察者们，事件发生了。在"主体类"的实现功能的方法中，调用notify()方法，即可实现"告知"功能。

其次，再来看我们的第一个观察者类：SecurityMonitor类。与"主体类"的方法一样，也是通过定义参数类型，来限制了只有"主体类"才能传入到update()方法。
但是这个类有一个问题：你作为一个观察者类，实质上你是"被"主体类调用的。但是你现在反过来调用了"主体类"的getStatus()方法，请问你是如何得知你的
服务端代码中包含一个叫做"getStatus()"的方法的呢？
不谈这个坑，我们继续往下看。
通过判断"主体类"的成员属性/成员方法的当前值/返回值，来决定观察者是否需要作出某些行为。讲一句拟人一些的话就是"观察者在得知了被观察者的信息后决定如何行动"。
当然，这个前提条件是"主体类"给"观察者类"提供了查询当前值/返回值的方法。

那么再git checkout一下，如何解决上面所说的"如何得知你的服务端代码中包含一个叫做getStatus()的方法"这一问题的呢？
见代码11-3-5.php

思路:
从观察者类的接口下手，对每个观察者的实现类，写一个抽象类。
该抽象类的功能:
1.通过__construct(Login $login) 将观察者类的实现类，绑定到主体类上
2.因为1个主体会对应多个观察者，所以需要让多个观察者，同时监听主体类是否发生了"事件"。通过update(Observable $observable)方法，实现了当主体为Login类时，
执行所有监听了Login类的观察者的doUpdate(Login $login)方法

