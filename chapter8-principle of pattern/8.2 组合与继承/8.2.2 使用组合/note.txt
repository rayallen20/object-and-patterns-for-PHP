策略模式:
将一组算法移入到一个独立的类中。
在本例中，就是把cost()和chargeType()两个算法移入到CostStrategy类中。
通过移走cost()和chargeType()，可以简化Lesson类。个人认为还解耦了课程/演讲/研讨会等实体
和它的计费规则之间的联系。
见代码8.2.2

委托:显式调用另一个对象的方法来执行一个请求的方式称为"委托"。在代码8.2.2中，
CostStrategy对象就是Lesson的委托方。

本例中的组合，就是基于类的单一职责而拆解的功能。将计费功能单独抽离出来作为一个独立的类，
这样就可以动态地计算费用了。

总结:通过8.2.1和8.2.2可以看出，组合比继承更加灵活。因为组合可以以多种方式动态地处理任务。
但是代码的可读性可能会有所下降。因为组合需要更多的对象类型，而这些类型之间的关系并不像
继承关系那样具有比较固定的可预见性。所以要理解系统中类和对象的关系会比继承困难。