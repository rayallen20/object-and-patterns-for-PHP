重用性是面向对象设计的主要目标之一。而紧耦合使提升代码重用性变的困难。
当我们看到系统中一个组件的改变迫使其他很多地方也必须随之改变系统才能再次运行时，
就可以诊断为紧耦合了。
例如:
我们的系统现在是基于MySQL数据库的系统。但是现在需求要求我们的系统支持
MySQL和SQLite两种数据库，我们就要改变系统中很多地方的代码，并且要维护这个系统的两个并行版本。

解决方案:
首先，这里的问题不在于我们的系统对外部环境的依赖，这种依赖无法避免。我们确实需要使用和数据库交互的代码。
但是当这种代码在系统中随处可见时，问题就产生了。与数据库交互并不是系统中大部分类的主要职责。因此好的解决方案
应该是提取和数据库交互的代码并将它们组合在公共接口后。这样可以使类之间相互独立。
同时，通过在一个地方集中和数据库交互的代码，可以更方便的切换到一个新的平台，而不会对系统内部造成很大的修改。
把具体实现隐藏在一个干净的接口后面的过程，就是封装。