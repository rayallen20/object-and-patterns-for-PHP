针对接口而不针对实现的解释:把不同的实现隐藏在父类所定义的共同接口下。
客户端代码需要一个父类的对象，使得客户端代码不关心它实际得到的是哪个子类，
客户端代码只需要知道这个对象拥有某个方法即可。

模拟继承:在if(condition1){code1}else if(condition2){code2} else{code3}
这种并行的条件语句出现时，很有可能是一个需要多态的标志。因为条件表达式一旦改变，
则对应的那部分代码也必然会随之改变。使得代码很难维护。因而这种场景应该使用多态。

从客户端代码的角度来看，类方法的参数类型提示为父类或基础类型都是可以的。但是如果
是某个子类，就有可能失去组合的灵活性。

但是，面向接口编程有一个无法回答的问题:如何实例化对象