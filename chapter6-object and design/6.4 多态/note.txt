多态的定义:
一个公用接口背后维护了多个实现
落地一点的说法:
如果在代码中存在大量条件语句，就说明需要使用多态
即一个方法有可能返回A类的对象或B类的对象
多态并没有消除if/switch语句，只是把它们放到了同一个地方。

PHP强制接口由抽象类定义。这就可以确定，子类将会实现父类中定义的所有方法。
包括类型提示和访问控制。
因此，客户端代码可以使用一个公共父类的任意子类而无需改写代码。
(因为这些子类的结构都是类似的。)

这个规则的缺陷:无法强制规定类方法返回的数据类型。
也就是说，不同子类的方法可能返回不同类型的对象或基本数据类型。
这就损害了类型的互换性。[客户端代码不能随意切换使用不同子类的对象----对互换性的注释]
所以应该使返回值保持一致。