封装:对客户端代码隐藏数据和功能。
实现封装的最简单方法:
将属性设置为private或protected。通过对客户端代码隐藏属性，
我们创建接口并防止在某些情况下污染对象中的数据。

多态则是另一种封装。
通过把不同的实现放在公共接口背后的方式，对客户端代码隐藏了实现。
换句话说，任何在接口背后发生的改变对外界系统而言都是可忽略的。
接口和它背后的工作机制是分开的。这些机制越独立，修改代码对系统的影响越小。

封装是面向对象编程的关键。因为面向对象编程的目的就是使系统中的每一部分都尽可能的独立。

看下面一段代码

function workWithProducts(ShopProduct $prod)
{
    if($prod instanceof CDProduct)
    {
        // CD产品特有的操作
    }
    else if($prod instanceof BookProduct)
    {
        // 图书产品特有的操作
    }
}

在代码中查询特定子类型时，会产生一个依赖关系。
也就是说:上边这段代码在修改了CDProduct类或BookProduct类时，是有可能产生错误的。

如果利用多态来隐藏特定子类型的特性，当继承关系改变时就不会产生任何错误。

这个例子得出的结论:
1.封装可以创建正交的代码[此处的正交指的是比较独立，依赖性小的代码]
2.封装的范围不是特别重要，类和客户端代码必须同时关注封装的实现。