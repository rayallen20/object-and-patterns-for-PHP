组合模式:
1.定义了一个单根继承体系
2.这个体系使具有截然不同职责的集合可以一起工作

问题:为什么这些对象可以成为集合？
答案:组合模式中的类必须支持一个共同的操作集，用以作为这些类的首要职责。
在这个例子中，bombardStrength()方法就是这个"共同的操作集"

在本例中:
Army类和TroopCarrier类是组合对象，有部队单位的操作功能，可以包含Unit对象。
Archer类和LaserCannon类是局部对象，有部队单位的操作功能，不能包含Unit对象。

概念:
局部对象:又称为树叶对象。称为树叶是因为组合模式为树型结构，组合对象为枝干，单独存在的对象为树叶。
树叶对象应该是最小单位，其中不能包含其他对象。

问题:Archer类和LaserCannon类作为最小单位，要不要和组合对象遵循同样的接口？
从UML类图来看是要遵循的。稍后会解释这个问题。
实现见10.2.2

从10.2.2中可以看到，现在Army对象可以保存任何类型的Unit对象。(不管是组合对象Army还是局部对象Archer或LaserCannon)
但是上面提到的问题暴露出来了:Archer类和LaserCannon类的实例，是叶子对象，
不应该具备addUnit()和removeUnit()的能力，该如何解决？ 见代码10.2.2-2

代码10.2.2-2的问题在于:解决了局部类不具备addUnit和removeUnit的问题，但是所有的局部类的
addUnit()和removeUnit()方法中，抛出异常的代码大量重复。解决办法:将抛出异常的代码放到抽象超类中
见代码10.2.2-3

此时，还是会出现一个问题:组合类(如Army)不再需要强制实现addUnit()和removeUnit()。
如果组合类作为抽象超类Unit的实现，没有覆写addUnit()和removeUnit()，那么这个组合类就将成为局部类。
这会产生问题。

组合模式的优点:
1.灵活:因为组合模式中的一切类都共享了同一个父类型，所以可以很容易的在设计中添加新的组合对象
或局部对象，而无需大范围的修改代码。
2.简单:在组合模式下，客户端代码的接口设计会非常简单。因为客户端代码是不关注一个对象到底是
组合对象还是局部对象的。客户端代码只关注这个对象有没有某个方法。
3.隐式到达(implicit reach):组合模式中的对象通过树型结构组织。(见P161图)每个组合对象中都
保存着对子对象的引用。因此对树中某部分的一个小操作可能会产生很大的影响。
例如:将一个父Army对象的某个子Army对象删除，并将这个子Army对象添加到另一个父Army对象上去。
这个动作看起来只是对子Army对象产生了影响，但实际上子Army对象中所引用的Unit对象和它们的子对象
的状态也同时受到了影响。
4.显式到达(explicit reach):树型结构可轻松遍历。可以通过迭代树形结构来获取组合对象和局部对象的信息，
或者对组合对象和局部对象执行批量处理。

从客户端角度来看待使用组合模式的好处。见代码10.2.2-4