在系统中总会主键形成大量仅在系统自身内部有用的代码。系统也应该和类一样，
提供定义清晰的公共接口，并隐藏外部结构。但是，系统中哪些部分应该设置为公开，
哪些部分应该被设置为隐藏，这并不容易决定。

当使用子系统的代码时，你也许会发现自己过于深入地调用子系统的逻辑代码。
如果子系统代码总是在不断变化，而你的代码又在许多不同地方和子系统代码交互，
那么随着子系统的发展，你的代码维护起来也非常困难。

类似的，当你创建自己的系统时，将不同部分分层会是一个好的做法。例如MVC。
你应该尽可能使这些分层相互独立，以便项目中某一部分的修改尽量不影响到其他地方。
如果某曾中的代码和另一层的代码存在耦合，那么这个目标就很难达成了。

代码10.4.1就是一些故意让人混淆的，不着边际的代码。它们的功能只是从文件中获取log信息
并将他们转换为对象数据。

如果在项目中这样直接调用这些方法，那么负责调用的代码就会和子系统紧紧耦合在一起。
当子系统变化或我们决定将调用代码和子系统完全断开时，代码就会出现问题。
所以，我们需要在子系统和负责调用的代码中间，引入一个入口。